<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
                当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->

<configuration debug="false">
    <contextName>${APP_NAME}</contextName>
    <conversionRule conversionWord="trace" converterClass="com.cb.signupstage.config.TraceMessageConverter"/>

    <!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义后，可以使“${}”来使用变量。 -->
    <!--<property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}/}spring.log}"/>-->
    <property name="LOG_FILE" value="log"/>
    <property name="APP_NAME" value="ExaminationSystem"/>
    <property name="LOG_HOME" value="data/logs"/> <!--data 前加/ 为绝对路径-->
    <property name="ERROR_ENCODER_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%10.10thread] [%X{X-B3-TraceId}] %logger{20} - %msg%n"/>
    <!--[]的顺序代表分类的顺序，[%-5level] 日志级别; [%X{X-B3-TraceId}];  [%thread]为线程信息;  [%trace]为自定义的tracId; [%line]缩略包名;  %msg%n 具体的日志信息-->
    <property name="STANDARD_ENCODER_PATTERN" value="[%-5level] %d{HH:mm:ss.SSS} [%X{X-B3-TraceId}]  [%trace] %logger{36} [%line] - %msg%n"/>

    <!--1. 输出到控制台-->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--<pattern>%d{HH:mm:ss.SSS} %-5level %logger{36} [%line] - %msg%n</pattern>-->
            <!-- ch.qos.logback.core.ConsoleAppender 控制台输出 -->
            <pattern>${STANDARD_ENCODER_PATTERN}</pattern>
        </encoder>
    </appender>

    <!--2. 输出到文档-->
    <!-- 2.1 level为 DEBUG 日志，时间滚动输出  -->
    <appender name="doc" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <!--<File>${LOG_FILE}</File>-->
        <!--日志文档输出格式-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${STANDARD_ENCODER_PATTERN}</pattern>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/${APP_NAME}/%d{yyyy-MM-dd}.log</fileNamePattern>
            <!--日志保存30天-->
            <maxHistory>30</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <appender name="ERROR_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--<file>${LOG_HOME}/error.log</file>--> <!--直接指定名称-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/${APP_NAME}/%d{yyyy-MM-dd}.error.log
            </fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${ERROR_ENCODER_PATTERN}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
    </appender>

    <!-- 开发、测试环境 -->
    <springProfile name="dev,test">
        <logger name="org.springframework.web" level="INFO"/>
        <logger name="com.github.jetty" level="INFO"/>
        <!-- com.fristapp是本项目的dao层的包，日志级别调成 DEBUG级别可以看到sql执行-->
        <logger name="com.github.jetty" level="DEBUG"/>
    </springProfile>

    <!-- 生产环境 -->
    <springProfile name="product">
        <!--logger用来设置某一个包或者具体的某一个类的日志打印级别-->
        <!--name用来指定受此loger约束的某一个包或者具体的某一个类-->
        <logger name="org.springframework.web" level="ERROR"/>
        <logger name="com.github.jetty" level="ERROR"/>
    </springProfile>


    <logger name="noModule" level="info"/>
    <logger name="org.codehaus" level="info"/>
    <logger name="org.apache" level="info"/>
    <logger name="org.springframework" level="info"/>
    <logger name="druid.sql" level="info"/>
    <logger name="com.alibaba" level="debug">
        <appender-ref ref="stdout"/>
    </logger>
    <logger name="com.springboot" level="debug"/>
    <root level="info">
        <appender-ref ref="stdout"/>
        <appender-ref ref="doc"/>
        <appender-ref ref="ERROR_FILE"/>
    </root>
</configuration>
